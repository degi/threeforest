#' @export
#'
generate_tree <- function(dbh = 15,
height = NULL,
crown_base_height = NULL,
crown_width_max_height = NULL,
crown_radius = NULL,
crown_radius_init_angle = 0,
is_branch_capped = F,
crown_type = "wireframe") {
print(crown_base_height)
if(is.blank(height)) height <- eq_height(dbh)
if(is.blank(crown_base_height)) crown_base_height <- height/2
crown_depth <- height - crown_base_height
if(is.blank(crown_radius)) crown_radius <- eq_crownwidth(dbh)/2
if(is.blank(crown_width_max_height))
crown_width_max_height <- crown_base_height + crown_depth/3
crown_curve_depth <- height - crown_width_max_height
vbranches <- generate_vbranches(crown_radius = crown_radius,
crown_depth = crown_depth,
crown_curve_depth = crown_curve_depth,
crown_radius_init_angle = crown_radius_init_angle)
br_tips <- vbranches[c("x", "y", "z")]
br_tips$z <- br_tips$z + crown_base_height
v <- as.vector(t(as.matrix(br_tips)))
t <- list(dbh = dbh,
height = height,
crown_base_height = crown_base_height,
crown_radius = crown_radius,
crown_radius_avg = mean(crown_radius),
crown_radius_max = max(crown_radius),
vbranches = vbranches,
vertices = v,
indices = triangle_index - 1,
crown_type = crown_type,
crown_color = "#A52A2A",
is_branch_capped = is_branch_capped
)
class(t) <- "tree"
br <- generate_realistic_branches(t)
t$branches <- br$branches
t$leaves <- br$leaves
return(t)
}
plant <- function(tree_df, area = list(length = 100, width = 100)) {
f <- list()
no_dbh <- "Argument 'tree_df' has no information on 'dbh'"
if (is.data.frame(tree_df)) {
if(!("dbh" %in% colnames(tree_df))) stop(no_dbh)
f <- apply(tree_df, 1, function(t){
generate_tree(dbh = t["dbh"],
height = t["height"],
crown_base_height = t["crown_base_height"],
crown_width_max_height = t["crown_width_max_height"],
crown_radius = t["crown_radius"])
})
} else if(is(tree_df,"numeric")) {
f <- lapply(tree_df, generate_tree)
} else if(is(tree_df,"list")) {
if(!("dbh" %in% names(tree_df))) stop(no_dbh)
for(i in 1:length(tree_df["dbh"])) {
t <- generate_tree(dbh = tree_df[["dbh"]][i],
height = tree_df[["height"]][i],
crown_base_height = tree_df[["crown_base_height"]][i],
crown_width_max_height = tree_df[["crown_width_max_height"]][i],
crown_radius = tree_df[["crown_radius"]][i])
f <- append(f, t)
}
} else {
stop("Argument 'tree_df' has unknown format")
}
class(f) <- "forest"
return(f)
}
df2 <- list(dbh = d, height = c(10, 30))
f2 <- plant(df2)
f2
f2[[2]]
f2[[2]]$dbh
length(f2)
plant <- function(tree_df, area = list(length = 100, width = 100)) {
f <- list()
no_dbh <- "Argument 'tree_df' has no information on 'dbh'"
if (is.data.frame(tree_df)) {
if(!("dbh" %in% colnames(tree_df))) stop(no_dbh)
f <- apply(tree_df, 1, function(t){
generate_tree(dbh = t["dbh"],
height = t["height"],
crown_base_height = t["crown_base_height"],
crown_width_max_height = t["crown_width_max_height"],
crown_radius = t["crown_radius"])
})
} else if(is(tree_df,"numeric")) {
f <- lapply(tree_df, generate_tree)
} else if(is(tree_df,"list")) {
if(!("dbh" %in% names(tree_df))) stop(no_dbh)
for(i in 1:length(tree_df["dbh"])) {
t <- generate_tree(dbh = tree_df[["dbh"]][i],
height = tree_df[["height"]][i],
crown_base_height = tree_df[["crown_base_height"]][i],
crown_width_max_height = tree_df[["crown_width_max_height"]][i],
crown_radius = tree_df[["crown_radius"]][i])
f <- append(f, list(t))
}
} else {
stop("Argument 'tree_df' has unknown format")
}
class(f) <- "forest"
return(f)
}
df2 <- list(dbh = d, height = c(10, 30))
f2 <- plant(df2)
length(f2)
f2
length(df2["dbh"])
length(df2[["dbh"]])
plant <- function(tree_df, area = list(length = 100, width = 100)) {
f <- list()
no_dbh <- "Argument 'tree_df' has no information on 'dbh'"
if (is.data.frame(tree_df)) {
if(!("dbh" %in% colnames(tree_df))) stop(no_dbh)
f <- apply(tree_df, 1, function(t){
generate_tree(dbh = t["dbh"],
height = t["height"],
crown_base_height = t["crown_base_height"],
crown_width_max_height = t["crown_width_max_height"],
crown_radius = t["crown_radius"])
})
} else if(is(tree_df,"numeric")) {
f <- lapply(tree_df, generate_tree)
} else if(is(tree_df,"list")) {
if(!("dbh" %in% names(tree_df))) stop(no_dbh)
for(i in 1:length(tree_df[["dbh"]])) {
t <- generate_tree(dbh = tree_df[["dbh"]][i],
height = tree_df[["height"]][i],
crown_base_height = tree_df[["crown_base_height"]][i],
crown_width_max_height = tree_df[["crown_width_max_height"]][i],
crown_radius = tree_df[["crown_radius"]][i])
f <- append(f, list(t))
}
} else {
stop("Argument 'tree_df' has unknown format")
}
class(f) <- "forest"
return(f)
}
df2 <- list(dbh = d, height = c(10, 30))
f2 <- plant(df2)
f2[[2]]
f2[[2]]$dbh
f2[[2]]$height
f2[[3]]$height
plot.forest <- function(x) {
print(length(x))
}
f2
plot(f2)
plant <- function(tree_df, area = list(length = 100, width = 100)) {
f <- list()
no_dbh <- "Argument 'tree_df' has no information on 'dbh'"
if (is.data.frame(tree_df)) {
if(!("dbh" %in% colnames(tree_df))) stop(no_dbh)
f <- apply(tree_df, 1, function(t, area){
print(area)
generate_tree(dbh = t["dbh"],
height = t["height"],
crown_base_height = t["crown_base_height"],
crown_width_max_height = t["crown_width_max_height"],
crown_radius = t["crown_radius"],
x = t["x"],
y = t["y"]
)
}, area = area)
} else if(is(tree_df,"numeric")) {
f <- lapply(tree_df, generate_tree)
} else if(is(tree_df,"list")) {
if(!("dbh" %in% names(tree_df))) stop(no_dbh)
for(i in 1:length(tree_df[["dbh"]])) {
t <- generate_tree(dbh = tree_df[["dbh"]][i],
height = tree_df[["height"]][i],
crown_base_height = tree_df[["crown_base_height"]][i],
crown_width_max_height = tree_df[["crown_width_max_height"]][i],
crown_radius = tree_df[["crown_radius"]][i])
f <- append(f, list(t))
}
} else {
stop("Argument 'tree_df' has unknown format")
}
class(f) <- "forest"
return(f)
}
#' @param dbh Tree size
#' @param height
#' @param crown_base_height
#' @param crown_width_max_height
#' @param crown_radius
#' @param crown_radius_init_angle
#'
#' @return Tree object
#' @export
#'
generate_tree <- function(dbh = 15,
height = NULL,
crown_base_height = NULL,
crown_width_max_height = NULL,
crown_radius = NULL,
crown_radius_init_angle = 0,
x = 0,
y = 0) {
print(crown_base_height)
if(is.blank(height)) height <- eq_height(dbh)
if(is.blank(crown_base_height)) crown_base_height <- height/2
crown_depth <- height - crown_base_height
if(is.blank(crown_radius)) crown_radius <- eq_crownwidth(dbh)/2
if(is.blank(crown_width_max_height))
crown_width_max_height <- crown_base_height + crown_depth/3
crown_curve_depth <- height - crown_width_max_height
vbranches <- generate_vbranches(crown_radius = crown_radius,
crown_depth = crown_depth,
crown_curve_depth = crown_curve_depth,
crown_radius_init_angle = crown_radius_init_angle)
br_tips <- vbranches[c("x", "y", "z")]
br_tips$z <- br_tips$z + crown_base_height
v <- as.vector(t(as.matrix(br_tips)))
t <- list(dbh = dbh,
height = height,
crown_base_height = crown_base_height,
crown_radius = crown_radius,
crown_radius_avg = mean(crown_radius),
crown_radius_max = max(crown_radius),
x = x,
y = y,
vbranches = vbranches,
vertices = v,
indices = triangle_index - 1,
crown_color = "#A52A2A",
is_branch_capped = F
)
class(t) <- "tree"
br <- generate_realistic_branches(t)
t$branches <- br$branches
t$leaves <- br$leaves
return(t)
}
plant <- function(tree_df, area = list(length = 100, width = 100)) {
f <- list()
no_dbh <- "Argument 'tree_df' has no information on 'dbh'"
if (is.data.frame(tree_df)) {
if(!("dbh" %in% colnames(tree_df))) stop(no_dbh)
f <- apply(tree_df, 1, function(t, area){
print(area)
generate_tree(dbh = t["dbh"],
height = t["height"],
crown_base_height = t["crown_base_height"],
crown_width_max_height = t["crown_width_max_height"],
crown_radius = t["crown_radius"],
x = t["x"],
y = t["y"]
)
}, area = area)
} else if(is(tree_df,"numeric")) {
f <- lapply(tree_df, generate_tree)
} else if(is(tree_df,"list")) {
if(!("dbh" %in% names(tree_df))) stop(no_dbh)
for(i in 1:length(tree_df[["dbh"]])) {
t <- generate_tree(dbh = tree_df[["dbh"]][i],
height = tree_df[["height"]][i],
crown_base_height = tree_df[["crown_base_height"]][i],
crown_width_max_height = tree_df[["crown_width_max_height"]][i],
crown_radius = tree_df[["crown_radius"]][i])
f <- append(f, list(t))
}
} else {
stop("Argument 'tree_df' has unknown format")
}
class(f) <- "forest"
return(f)
}
plot.forest <- function(x) {
print(length(x))
}
df <- data.frame(dbh = d, height = c(10, 30, 50))
f2 <- plant(df)
#' @param dbh Tree size
#' @param height
#' @param crown_base_height
#' @param crown_width_max_height
#' @param crown_radius
#' @param crown_radius_init_angle
#'
#' @return Tree object
#' @export
#'
generate_tree <- function(dbh = 15,
height = NULL,
crown_base_height = NULL,
crown_width_max_height = NULL,
crown_radius = NULL,
crown_radius_init_angle = 0,
x = 0,
y = 0) {
if(is.blank(height)) height <- eq_height(dbh)
if(is.blank(crown_base_height)) crown_base_height <- height/2
crown_depth <- height - crown_base_height
if(is.blank(crown_radius)) crown_radius <- eq_crownwidth(dbh)/2
if(is.blank(crown_width_max_height))
crown_width_max_height <- crown_base_height + crown_depth/3
crown_curve_depth <- height - crown_width_max_height
vbranches <- generate_vbranches(crown_radius = crown_radius,
crown_depth = crown_depth,
crown_curve_depth = crown_curve_depth,
crown_radius_init_angle = crown_radius_init_angle)
br_tips <- vbranches[c("x", "y", "z")]
br_tips$z <- br_tips$z + crown_base_height
v <- as.vector(t(as.matrix(br_tips)))
t <- list(dbh = dbh,
height = height,
crown_base_height = crown_base_height,
crown_radius = crown_radius,
crown_radius_avg = mean(crown_radius),
crown_radius_max = max(crown_radius),
x = x,
y = y,
vbranches = vbranches,
vertices = v,
indices = triangle_index - 1,
crown_color = "#A52A2A",
is_branch_capped = F
)
class(t) <- "tree"
br <- generate_realistic_branches(t)
t$branches <- br$branches
t$leaves <- br$leaves
return(t)
}
plant <- function(tree_df, area = list(x_length = 100, y_length = 100)) {
f <- list()
no_dbh <- "Argument 'tree_df' has no information on 'dbh'"
if (is.data.frame(tree_df)) {
if(!("dbh" %in% colnames(tree_df))) stop(no_dbh)
f <- apply(tree_df, 1, function(tdf, area){
t <- generate_tree(dbh = tdf["dbh"],
height = tdf["height"],
crown_base_height = tdf["crown_base_height"],
crown_width_max_height = tdf["crown_width_max_height"],
crown_radius = tdf["crown_radius"]
)
t$x <- ifelse(is.blank(tdf["x"]), area$x_length * runif(1), tdf["x"])
t$y <- ifelse(is.blank(tdf["y"]), area$y_length * runif(1), tdf["y"])
return(t)
}, area = area)
} else if(is(tree_df,"numeric")) {
f <- lapply(tree_df, generate_tree)
} else if(is(tree_df,"list")) {
if(!("dbh" %in% names(tree_df))) stop(no_dbh)
for(i in 1:length(tree_df[["dbh"]])) {
t <- generate_tree(dbh = tree_df[["dbh"]][i],
height = tree_df[["height"]][i],
crown_base_height = tree_df[["crown_base_height"]][i],
crown_width_max_height = tree_df[["crown_width_max_height"]][i],
crown_radius = tree_df[["crown_radius"]][i])
f <- append(f, list(t))
}
} else {
stop("Argument 'tree_df' has unknown format")
}
class(f) <- "forest"
return(f)
}
df <- data.frame(dbh = d, height = c(10, 30, 50))
f2 <- plant(df)
f2[[2]]$x
f2[[2]]$y
devtools::document()                       # roxygenize, so NAMESPACE is updated
# setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# devtools::create("vtree")               # create package using devtools
#changes the wd to widget root folder
setwd(paste0(dirname(rstudioapi::getActiveDocumentContext()$path), "/vtree"))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
d <- c(10, 20, 30)
f <- plant(d)
plot(f)
plot(plant(1+runif(100)*50))
plot(plant(1+runif(1000)*50))
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
vtree(generate_tree(20))
#
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
vtree(generate_tree(20))
#
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
vtree(generate_tree(20))
#
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(100)*50))
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(10)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(10)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(1000)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(500)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(500)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(300)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(300)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(300)*50))
devtools::document()                       # roxygenize, so NAMESPACE is updated
devtools::install()
library(vtree)
plot(plant(1+runif(300)*50))
plot(plant(1+runif(1500)*50))
plot(plant(1+runif(2000)*50))
